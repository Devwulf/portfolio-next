import type { GetStaticProps, InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import qs from "qs";
import { Parallax } from "@react-spring/parallax";
import Hero from "../components/hero";
import { useEffect, useState } from "react";
import Projects from "../components/projects";
import About from "../components/about";
import Contact from "../components/contact";
import Image from "next/image";
import { Post } from "../types/Post";
import { Project } from "../types/Project";

const Home: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (
    props
) => {
    const { posts, projects } = props;
    const [windowWidth, setWindowWidth] = useState(0);

    useEffect(() => {
        setWindowWidth(window.innerWidth);
        window.addEventListener("resize", () => {
            setWindowWidth(window.innerWidth);
        });
    }, []);
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Parallax
                key={`parallax-${windowWidth <= 1200 ? "lean" : "normal"}`}
                pages={windowWidth <= 1200 ? 5 : 4}
                innerStyle={{
                    backgroundImage: "url(/starfield.png)",
                    backgroundAttachment: "scroll"
                }}
            >
                <Hero windowWidth={windowWidth} />
                <Projects windowWidth={windowWidth} offset={1} projects={projects} />
                <About
                    windowWidth={windowWidth}
                    offset={windowWidth <= 1200 ? 3 : 2}
                />
                <Contact windowWidth={windowWidth}
                    offset={windowWidth <= 1200 ? 4 : 3} />
            </Parallax>

            {/*
            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="https://nextjs.org">Next.js!</a>
                </h1>

                <p className={styles.description}>
                    Get started by editing{" "}
                    <code className={styles.code}>pages/index.tsx</code>
                </p>

                <div className={styles.grid}>
                    <a href="https://nextjs.org/docs" className={styles.card}>
                        <h2>Documentation &rarr;</h2>
                        <p>
                            Find in-depth information about Next.js features and
                            API.
                        </p>
                    </a>

                    <a href="https://nextjs.org/learn" className={styles.card}>
                        <h2>Learn &rarr;</h2>
                        <p>
                            Learn about Next.js in an interactive course with
                            quizzes!
                        </p>
                    </a>

                    <a
                        href="https://github.com/vercel/next.js/tree/canary/examples"
                        className={styles.card}
                    >
                        <h2>Examples &rarr;</h2>
                        <p>
                            Discover and deploy boilerplate example Next.js
                            projects.
                        </p>
                    </a>

                    <a
                        href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                        className={styles.card}
                    >
                        <h2>Deploy &rarr;</h2>
                        <p>
                            Instantly deploy your Next.js site to a public URL
                            with Vercel.
                        </p>
                    </a>
                </div>
            </main>
            */}

        </div>
    );
};

export const getStaticProps: GetStaticProps<{
    posts: Post[];
    projects: Project[];
}> = async (context) => {
    const query = qs.stringify(
        {
            populate: "author"
        },
        {
            encodeValuesOnly: true
        }
    );

    const apiKey = process.env.STRAPI_API;
    const apiUrl = process.env.NEXT_PUBLIC_STRAPI_URL;
    if (apiKey == null || apiUrl == null)
        return {
            props: {
                posts: [],
                projects: []
            }
        };

    const requestInit = {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json"
        }
    };

    const res = await fetch(`${apiUrl}/api/posts`);
    const json = await res.json();
    const posts: Post[] = json["data"] ?? [];

    const res2 = await fetch(`${apiUrl}/api/projects?populate=*`);
    const json2 = await res2.json();
    const projects: Project[] = json2["data"] ?? [];

    return {
        props: {
            posts,
            projects
        }
    };
};

export default Home;
